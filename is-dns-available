#!/bin/bash

# Copyright (C) 2020 drpawpaw. All Rights Reserved.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


# Returns 0 if an upstream DNS server is available, non-zero if not.

# Add optional -p and it will also print 'yes' or 'no'.

# All its text output is on stderr.

# How this script "ensures" its result is not a possibly misleading assertion
# from a same-host DNS resolver/server: It selects a random internet domain
# name from file TOP_DOMAINS, which it script must be configured to point at.
# I.E. It requests the IP of a domain that has not likely been searched
# for recently from the host, forcing dig to make an upstream DNS request.
# Thus, this script is also effectively an "is network accessible" script.
#
# The larger the TOP_DOMAINS file is the more likely the requested domain is
# not in the local resolver/server's cache, making its return value more
# reliable.
#
# Example command that will populated such a file:
#
#     $ curl -X GET 'https://www.alexa.com/topsites/countries/US' | \
#                   grep '<a href="https://www.alexa.com/siteinfo/' |
#                   cut -d '"' -f2 | sed -r 's|^.*/||' | sort
#
# Or, for 1,000,000 resulsts insead of 50:
#
#     https://www.quantcast.com/top-sites/
#     https://ak.quantcast.com/quantcast-top-sites.zip
#
# https://serverfault.com/questions/264685/\
#     forcing-the-dig-tool-to-return-us-answers-from-the-root-servers
#
# While this script's goal is not to force a lookup all the way to a domain's
# root name sever, it does include the NS query option for this reason: If by
# some chance another host on the LAN has requested the same domain recently
# enough for the answer to be in the LAN DNS server's cache, it will be
# unlikely the cached answer is for an NS lookup on the domain. Thus, the
# request will likely be pushed upstream onto the internet. I.E. This script
# is more often effectively an "is internet accessible" script than just an
# "is network accessible" one.


declare -r DOMAINS=bin/sys-admin/config/top-web-sites.txt

if [ -n "$SUDO_USER" ]
then
    TOP_DOMAINS="/home/$SUDO_USER/$DOMAINS"
else
    TOP_DOMAINS="$HOME/$DOMAINS"
fi


if [ ! -f "$TOP_DOMAINS" ] || [ ! -r "$TOP_DOMAINS" ]
then
    echo -e "\nCannot access ${TOP_DOMAINS}." >&2
    exit 1
fi

randomDomain=$( shuf -n 1 < "$TOP_DOMAINS" )
if [ -z "$randomDomain" ]
then
    echo -e "\nFailed to find a random domain to lookup." >&2
    exit 1
fi
echo -e "$randomDomain" >&2

reverseLookup='-x'
# randomDomain has chars other than digits, '.' and ':' => NOT reverse lookup.
echo "$randomDomain" | grep -E '[^0-9:.]' &>/dev/null && reverseLookup=""

dig +dnssec +tries=3 +time=2 $reverseLookup "$randomDomain" NS &>/dev/null
D="$?"

if [ "-p" = "$1" ]
then
    if [ "0" = "$D" ]
    then
        echo yes >&2
    else
        echo no >&2
    fi
fi

exit $D

